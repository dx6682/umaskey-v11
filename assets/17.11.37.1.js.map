{"version":3,"sources":["webpack:///./src/client/app/common/views/components/user-menu.vue?6741","webpack:///./src/client/app/common/views/components/user-menu.vue?161a","webpack:///./src/client/app/common/views/components/user-menu.vue?2365","webpack:///./src/client/app/common/views/components/user-menu.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK,eAAe,sBAAsB,EAAE;AAC5C;AACA;AACA,gBAAgB,uCAAuC;AACvD,aAAa;AACb,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACjBsB;AACW;AAC0D;AACzB;AACnD,gGAAG;AAClB,UAAU,uBAAI;AACd;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qBAAqB;AACrD;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,iBAAiB;AACjB,0BAA0B,+BAAmB;AAC7C;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,0BAA0B,6BAAiB;AAC3C;AACA;AACA,iBAAiB;AACjB,0BAA0B,8CAAW;AACrC;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA,6CAA6C;AAC7C;AACA,mBAAmB,2BAA2B;AAC9C;AACA;AACA;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA,iBAAiB;AACjB;AACA;AACA;AACA,qBAAqB;AACrB,iBAAiB;AACjB;AACA,SAAS;AACT;AACA,8DAA8D;AAC9D,mBAAmB,4BAA4B;AAC/C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb;AACA;AACA;AACA,iBAAiB;AACjB,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA,SAAS;AACT;AACA,CAAC,CAAC,EAAC;;;AChNwQ,CAAgB,kHAAG,EAAC,C;;;;;ACAvM;AAC3B;AACL;;;AAGxD;AACsG;AACtG,gBAAgB,sCAAU;AAC1B,EAAE,4CAAM;AACR,EAAE,MAAM;AACR,EAAE,eAAe;AACjB;AACA;AACA;AACA;;AAEA;;AAEA;AACA,IAAI,KAAU,EAAE,YAiBf;AACD;AACe,gG","file":"17.11.37.1.js","sourcesContent":["var render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticStyle: { position: \"initial\" } },\n    [\n      _c(\"mk-menu\", {\n        attrs: { source: _vm.source, items: _vm.items },\n        on: { closed: _vm.closed }\n      })\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\nexport { render, staticRenderFns }","import Vue from 'vue';\nimport i18n from '../../../i18n';\nimport { faExclamationCircle, faMicrophoneSlash } from '@fortawesome/free-solid-svg-icons';\nimport { faSnowflake } from '@fortawesome/free-regular-svg-icons';\nexport default Vue.extend({\n    i18n: i18n('common/views/components/user-menu.vue'),\n    props: ['user', 'source'],\n    data() {\n        let menu = [{\n                icon: ['fas', 'at'],\n                text: this.$t('mention'),\n                action: () => {\n                    this.$post({ mention: this.user });\n                }\n            }, null, {\n                icon: ['fas', 'list'],\n                text: this.$t('push-to-list'),\n                action: this.pushList\n            }];\n        if (this.$store.getters.isSignedIn && this.$store.state.i.id != this.user.id) {\n            menu = menu.concat([null, {\n                    icon: this.user.isMuted ? ['fas', 'eye'] : ['far', 'eye-slash'],\n                    text: this.user.isMuted ? this.$t('unmute') : this.$t('mute'),\n                    action: this.toggleMute\n                }, {\n                    icon: 'ban',\n                    text: this.user.isBlocking ? this.$t('unblock') : this.$t('block'),\n                    action: this.toggleBlock\n                }, null, {\n                    icon: faExclamationCircle,\n                    text: this.$t('report-abuse'),\n                    action: this.reportAbuse\n                }]);\n        }\n        if (this.$store.getters.isSignedIn && (this.$store.state.i.isAdmin || this.$store.state.i.isModerator)) {\n            menu = menu.concat([null, {\n                    icon: faMicrophoneSlash,\n                    text: this.user.isSilenced ? this.$t('unsilence') : this.$t('silence'),\n                    action: this.toggleSilence\n                }, {\n                    icon: faSnowflake,\n                    text: this.user.isSuspended ? this.$t('unsuspend') : this.$t('suspend'),\n                    action: this.toggleSuspend\n                }]);\n        }\n        return {\n            items: menu\n        };\n    },\n    methods: {\n        closed() {\n            this.$nextTick(() => {\n                this.destroyDom();\n            });\n        },\n        async pushList() {\n            const t = this.$t('select-list'); // なぜか後で参照すると null になるので最初にメモリに確保しておく\n            const lists = await this.$root.api('users/lists/list');\n            const { canceled, result: listId } = await this.$root.dialog({\n                type: null,\n                title: t,\n                select: {\n                    items: lists.map(list => ({\n                        value: list.id, text: list.name\n                    }))\n                },\n                showCancelButton: true\n            });\n            if (canceled)\n                return;\n            await this.$root.api('users/lists/push', {\n                listId: listId,\n                userId: this.user.id\n            });\n            this.$root.dialog({\n                type: 'success',\n                splash: true\n            });\n        },\n        async toggleMute() {\n            if (this.user.isMuted) {\n                if (!await this.getConfirmed(this.$t('unmute-confirm')))\n                    return;\n                this.$root.api('mute/delete', {\n                    userId: this.user.id\n                }).then(() => {\n                    this.user.isMuted = false;\n                }, () => {\n                    this.$root.dialog({\n                        type: 'error',\n                        text: e\n                    });\n                });\n            }\n            else {\n                if (!await this.getConfirmed(this.$t('mute-confirm')))\n                    return;\n                this.$root.api('mute/create', {\n                    userId: this.user.id\n                }).then(() => {\n                    this.user.isMuted = true;\n                }, () => {\n                    this.$root.dialog({\n                        type: 'error',\n                        text: e\n                    });\n                });\n            }\n        },\n        async toggleBlock() {\n            if (this.user.isBlocking) {\n                if (!await this.getConfirmed(this.$t('unblock-confirm')))\n                    return;\n                this.$root.api('blocking/delete', {\n                    userId: this.user.id\n                }).then(() => {\n                    this.user.isBlocking = false;\n                }, () => {\n                    this.$root.dialog({\n                        type: 'error',\n                        text: e\n                    });\n                });\n            }\n            else {\n                if (!await this.getConfirmed(this.$t('block-confirm')))\n                    return;\n                this.$root.api('blocking/create', {\n                    userId: this.user.id\n                }).then(() => {\n                    this.user.isBlocking = true;\n                }, () => {\n                    this.$root.dialog({\n                        type: 'error',\n                        text: e\n                    });\n                });\n            }\n        },\n        async reportAbuse() {\n            const reported = this.$t('report-abuse-reported'); // なぜか後で参照すると null になるので最初にメモリに確保しておく\n            const { canceled, result: comment } = await this.$root.dialog({\n                title: this.$t('report-abuse-detail'),\n                input: true\n            });\n            if (canceled)\n                return;\n            this.$root.api('users/report-abuse', {\n                userId: this.user.id,\n                comment: comment\n            }).then(() => {\n                this.$root.dialog({\n                    type: 'success',\n                    text: reported\n                });\n            }, e => {\n                this.$root.dialog({\n                    type: 'error',\n                    text: e\n                });\n            });\n        },\n        async toggleSilence() {\n            if (!await this.getConfirmed(this.$t(this.user.isSilenced ? 'unsilence-confirm' : 'silence-confirm')))\n                return;\n            this.$root.api(this.user.isSilenced ? 'admin/unsilence-user' : 'admin/silence-user', {\n                userId: this.user.id\n            }).then(() => {\n                this.user.isSilenced = !this.user.isSilenced;\n                this.$root.dialog({\n                    type: 'success',\n                    splash: true\n                });\n            }, e => {\n                this.$root.dialog({\n                    type: 'error',\n                    text: e\n                });\n            });\n        },\n        async toggleSuspend() {\n            if (!await this.getConfirmed(this.$t(this.user.isSuspended ? 'unsuspend-confirm' : 'suspend-confirm')))\n                return;\n            this.$root.api(this.user.isSuspended ? 'admin/unsuspend-user' : 'admin/suspend-user', {\n                userId: this.user.id\n            }).then(() => {\n                this.user.isSuspended = !this.user.isSuspended;\n                this.$root.dialog({\n                    type: 'success',\n                    splash: true\n                });\n            }, e => {\n                this.$root.dialog({\n                    type: 'error',\n                    text: e\n                });\n            });\n        },\n        async getConfirmed(text) {\n            const confirm = await this.$root.dialog({\n                type: 'warning',\n                showCancelButton: true,\n                title: 'confirm',\n                text,\n            });\n            return !confirm.canceled;\n        },\n    }\n});\n","import mod from \"-!../../../../../../node_modules/ts-loader/index.js??ref--5-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!../../../../../../node_modules/vue-svg-inline-loader/dist/index.min.js!./user-menu.vue?vue&type=script&lang=ts&\"; export default mod; export * from \"-!../../../../../../node_modules/ts-loader/index.js??ref--5-0!../../../../../../node_modules/vue-loader/lib/index.js??vue-loader-options!../../../../../../node_modules/vue-svg-inline-loader/dist/index.min.js!./user-menu.vue?vue&type=script&lang=ts&\"","import { render, staticRenderFns } from \"./user-menu.vue?vue&type=template&id=481a4d34&\"\nimport script from \"./user-menu.vue?vue&type=script&lang=ts&\"\nexport * from \"./user-menu.vue?vue&type=script&lang=ts&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../../../../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (module.hot) {\n  var api = require(\"/home/ubuntu/uma/misskey/node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(require('vue'))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('481a4d34')) {\n      api.createRecord('481a4d34', component.options)\n    } else {\n      api.reload('481a4d34', component.options)\n    }\n    module.hot.accept(\"./user-menu.vue?vue&type=template&id=481a4d34&\", function () {\n      api.rerender('481a4d34', {\n        render: render,\n        staticRenderFns: staticRenderFns\n      })\n    })\n  }\n}\ncomponent.options.__file = \"src/client/app/common/views/components/user-menu.vue\"\nexport default component.exports"],"sourceRoot":""}